package com.example.micronaut;

import io.micronaut.core.type.*;
import io.micronaut.http.*;
import io.micronaut.http.client.*;
import io.micronaut.http.client.annotation.*;
import io.micronaut.test.extensions.junit5.annotation.*;
import jakarta.inject.*;
import org.junit.jupiter.api.*;

import java.util.*;
import java.util.regex.*;

import static org.junit.jupiter.api.Assertions.*;

@MicronautTest
class GithubControllerTest {

    @Inject
    @Client("/")
    HttpClient client;

    private static Pattern MICRONAUT_RELEASE = Pattern.compile("[Micronaut|Micronaut Framework] [0-9].[0-9].[0-9]([0-9])?( (RC|M)[0-9])?");

    @Test
    public void verifyGithubReleasesCanBeFetchedWithLowLevelHttpClient() {
        //when:
        HttpRequest<Object> request = HttpRequest.GET("/github/releases-lowlevel");

        HttpResponse<List<GithubRelease>> rsp = client.toBlocking().exchange(request,
                Argument.listOf(GithubRelease.class));

        //then: 'the endpoint can be accessed'
        assertEquals(HttpStatus.OK, rsp.getStatus());
        assertNotNull(rsp.body());

        //when:
        List<GithubRelease> releases = rsp.body();

        //then:
        assertNotNull(releases);
        assertTrue(releases.stream()
                .map(GithubRelease::getName)
                .allMatch(name -> MICRONAUT_RELEASE.matcher(name)
                        .find()));
    }

    @Test
    public void verifyGithubReleasesCanBeFetchedWithCompileTimeAutoGeneratedAtClient() {
        //when:
        HttpRequest<Object> request = HttpRequest.GET("/github/releases-lowlevel");

        List<GithubRelease> githubReleases = client.toBlocking().retrieve(request, Argument.listOf(GithubRelease.class));

        //then:
        assertTrue(githubReleases.stream()
                .map(GithubRelease::getName)
                .allMatch(name -> MICRONAUT_RELEASE.matcher(name)
                        .find()));
    }
}